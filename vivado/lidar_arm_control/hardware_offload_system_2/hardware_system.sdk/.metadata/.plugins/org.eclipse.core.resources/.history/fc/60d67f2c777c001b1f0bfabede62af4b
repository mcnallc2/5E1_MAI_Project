/*****************************************************************************/
/**
* @file ultrasonic_sensor_driver.c
*
* This file contains a design for a RPLIDAR Device driver using an AXI UARTLITE
* instance to communicate and an AXI GPIO driver (XGpio). It only uses channel 1
* of the GPIO device and assumes that the bit 0 of the GPIO is connected to the
* RPLIDAR motor pin. A Custom AXI IP is used to control the robot arm servo
* motors using 4 PWM outputs.
*
******************************************************************************/

/***************************** Include Files *********************************/

#include <stdio.h>
#include <math.h>
#include "xparameters.h"
#include "xgpio.h"
#include "xuartlite.h"
#include "xil_printf.h"
#include "xtime_l.h"

#include "xil_exception.h"
#include "xscugic.h"

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"


/************************** Constant Definitions *****************************/

// AXI GPIO
#define GPIO_EXAMPLE_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID 	// GPIO ID
#define LIDAR_MOTOR 			0x1						// LiDar Motor Pin
#define CHANNEL					1						// GPIO Channel

// AXI UARTLITE
#define UARTLITE_DEVICE_ID	    XPAR_UARTLITE_0_DEVICE_ID		// UARTLITE ID
#define UARTLITE_IRPT_INTR	    XPAR_FABRIC_UARTLITE_0_VEC_ID	// UARTLITE INTR ID
#define INTC_DEVICE_ID          XPAR_SCUGIC_SINGLE_DEVICE_ID	// INTR CONT ID
#define INTC                    XScuGic							// INTR CONT INST
#define INTC_HANDLER            XScuGic_InterruptHandler		// INTR CONT HANDLER
#define SEND_BUFFER_SIZE		2								// UARTLITE SEND BUF SIZE
#define RECV_BUFFER_SIZE		2000							// UARTLITE RECV BUF SIZE
#define PACKET_SIZE				5								// LIDAR PACKET SIZE

// AXI ROBOT ARM CONTROL
#define PWM_BASEADDR 			XPAR_ROBOT_ARM_CONTROL_0_S00_AXI_BASEADDR	// ROBOT ARM BASE ADDR
#define dutyCycle(angle) 		(35000 + (angle * 1583))					// ANGLE -> DUTYCYCLE MACRO
#define ANGLE_SHIFT 			350											// CHNAGE IN DUTY_CYCLE SHIFT

// TIMING
#define DELAY_10_SECONDS		10000UL	// 10 SEC DELAY
#define DELAY_1_SECOND			1000UL	// 1  SEC DELAY
#define DELAY_1_MSECOND			1UL		// 1 MSEC DELAY


/************************** Function Prototypes ******************************/

// AXI UARTLITE
int UartLiteInit(INTC *IntcInstancePtr,
		XUartLite *UartLiteInstPtr,
		u16 UartLiteDeviceId,
		u16 UartLiteIntrId);
int UartLiteStartScan(INTC *IntcInstancePtr,
		XUartLite *UartLiteInstPtr,
		u16 UartLiteDeviceId,
		u16 UartLiteIntrId);
int UartLiteStopScan(INTC *IntcInstancePtr,
		XUartLite *UartLiteInstPtr,
		u16 UartLiteDeviceId,
		u16 UartLiteIntrId);
int UartLiteSampleLidar(INTC *IntcInstancePtr,
		XUartLite *UartLiteInstPtr,
		u16 UartLiteDeviceId,
		u16 UartLiteIntrId);
int UartLiteSetupIntrSystem(INTC *IntcInstancePtr,
		XUartLite *UartLiteInstPtr,
		u16 UartLiteIntrId);
static void UartLiteSendHandler(void *CallBackRef,
		unsigned int EventData);
static void UartLiteRecvHandler(void *CallBackRef,
		unsigned int EventData);
static void UartLiteDisableIntrSystem(INTC *IntcInstancePtr,
		u16 UartLiteIntrId);

// LIDAR
void startLidarMotor();
void endOfTestHandler();

// Scheduler Tasks
static void testProcedure( void *pvParameters );
static void armControl( void *pvParameters );
static void lidarScanning( void *pvParameters );

// Test Procedure Tasks
void home_position(void);
void find_object(void);
void pickup_object(void);
void goto_target_location(void);
void putdown_object(void);

/************************** Variable Definitions *****************************/

XGpio Gpio; 						// The Instance of the GPIO Driver
XUartLite UartLite;            		// The instance of the UartLite Device

XScuGic_Config *IntcConfig;			// create GIC interrupt object

INTC InterruptController;  			// The instance of the Interrupt Controller

static INTC IntcInstance;			// The instance of the Interrupt Controller
static XUartLite UartLiteInst;  	// The instance of the UartLite Device

u8 SendBuffer[SEND_BUFFER_SIZE];	// Send Buffer
u8 RecvBuffer[RECV_BUFFER_SIZE];	// Recv Buffer

static volatile int TotalSentCount; // Total Sent Count
static volatile int TotalRecvCount; // Total Recv Count

int intrFlag = 0;					// Flag when recv buffer intr is triggered

static TaskHandle_t xTestProc;		// test proc task handler
static TaskHandle_t xArmCont;		// arm controller task handler
static TaskHandle_t xLidrCont;		// lidar controller task handler

float UPPER_ARM = 85;				// upper section of the arm
float LOWER_ARM	= 160;				// lower section of the arm

int FINISHED 	= 0;				// end of test flag
int TEST_STATE 	= 0;				// current test state

int inPos	= 0;					// flags when arm is in position
int picked	= 0;					// flags when object is picked
int dropped	= 0;					// flags when object is dropped

int baseDutyCycle		= dutyCycle(90);	// base servo duty cycle
int shoulderDutyCycle	= dutyCycle(0);		// shoulder servo duty cycle
int elbowDutyCycle		= dutyCycle(90);	// elbow servo duty cycle
int clawDutyCycle		= dutyCycle(90);	// claw servo duty cycle

typedef struct ObjectCoordinate{
    int angle;
    int distance;
} ObjectCoordinate;

ObjectCoordinate currentObject;


/*****************************************************************************/
//////////
// main //
//////////
int main(void){

	xil_printf("\n>>> Start LIDAR object detection and ARM control\r\n\n");
	// application health status
	int Status;

	// Initialize the GPIO driver
	Status = XGpio_Initialize(&Gpio, GPIO_EXAMPLE_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	xil_printf(" GPIO: Gpio Initialization\r\n");

	// Set the direction for all signals as inputs except the LIDAR_MOTOR output.
	XGpio_SetDataDirection(&Gpio, CHANNEL, ~(LIDAR_MOTOR));

	// Start rotating the LIDAR motor.
	startLidarMotor();

	// trigger the LIDAR to start scanning
	Status = UartLiteStartScan(&IntcInstance,
			&UartLiteInst,
			UARTLITE_DEVICE_ID,
			UARTLITE_IRPT_INTR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	xil_printf("LIDAR: Triggered Scanning\r\n");


	/////////////////////
	// Scheduler Tasks //
	/////////////////////
	xTaskCreate( testProcedure,
			"Test Procedure",
			2048,
			NULL,
			tskIDLE_PRIORITY,
			&xTestProc );

	xTaskCreate( armControl,
			"Arm Control",
			2048,
			NULL,
			tskIDLE_PRIORITY,
			&xArmCont );

	xTaskCreate( lidarScanning,
			"Lidar Scanning",
			2048,
			NULL,
			tskIDLE_PRIORITY,
			&xLidrCont );


	/* Start the tasks and timer running. */
	vTaskStartScheduler();

	while(1);

}



/****************************************************************************
*
* This function executes the Lidar test procedure.
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void testProcedure( void *pvParameters ){

	xil_printf("TASK 1: TEST PROCEDURE\r\n");

	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	while(1){
		switch (TEST_STATE){
		// sets arm to home position
		case 0:
			if(!inPos){
				xil_printf("TEST: Home Position\r\n");
				home_position();
			} else {
				TEST_STATE = 1;
				inPos = 0;
				xil_printf("TEST: Starting Test !!!\r\n");
				xil_printf("TEST: Moving to STATE 1\r\n");
			}
			break;

		// starts looking for object with lidar
		case 1:
			if(!inPos){
				find_object();

			} else {
				TEST_STATE = 2;
				inPos = 0;
				xil_printf("TEST: Moving to STATE 2\r\n");
			}
			break;

		// picks up object
		case 2:
			if(!inPos){
				pickup_object();

			} else {
				TEST_STATE = 3;
				inPos = 0;
				xil_printf("TEST: Moving to STATE 3\r\n");
			}
			break;

		// moves to target location
		case 3:
			if(!inPos){
				goto_target_location();
			} else {
				TEST_STATE = 4;
				inPos = 0;
				xil_printf("TEST: Moving to STATE 4\r\n");
			}
			break;

		// drops object
		case 4:
			if(!inPos){
				putdown_object();
			} else {
				TEST_STATE = 5;
				inPos = 0;
				xil_printf("TEST: Moving to STATE 5\r\n");
			}
			break;

		// returns to home position
		case 5:
			if(!inPos){
				home_position();
			} else {
				FINISHED = 1;
				inPos = 0;
				endOfTestHandler();
			}
			break;

		}
		// scheduler delay
		vTaskDelay(x1msecond);
	}
}



/****************************************************************************
*
* This function controls the behaviour of the base servo
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
static void armControl( void *pvParameters ){
//void armControl(){

	xil_printf("TASK 2: ARM_SERVOS PWM\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	while(1){

		// sends robot arm duty cycles to hardware over AXI
        Xil_Out32((PWM_BASEADDR     ), baseDutyCycle);
        Xil_Out32((PWM_BASEADDR + 4 ), shoulderDutyCycle);
        Xil_Out32((PWM_BASEADDR + 8 ), elbowDutyCycle);
        Xil_Out32((PWM_BASEADDR + 12), clawDutyCycle);

        // scheduler delay
		vTaskDelay(x1msecond);
	}
}



/****************************************************************************
*
* This function controls the behaviour of the base servo
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
static void lidarScanning( void *pvParameters ){
//void armControl(){

	xil_printf("TASK 3: LiDar Scanning\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );
	int Status;

	while(1){

		if (TEST_STATE == 1){
			Status = UartLiteSampleLidar(&IntcInstance,
					&UartLiteInst,
					UARTLITE_DEVICE_ID,
					UARTLITE_IRPT_INTR);
			if (Status != XST_SUCCESS) {
				xil_printf("LIDAR: Failed to obtain sample\r\n");
			}
		}

		vTaskDelay(x1msecond);
	}
}



/****************************************************************************
*
* This function is run when the test has completed. It will delete all
* scheduler tasks. This will stop rotation of the DC motor on the RPLIDAR device.
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void endOfTestHandler(void){

	// trigger the LIDAR to start scanning
	UartLiteStopScan(&IntcInstance,
			&UartLiteInst,
			UARTLITE_DEVICE_ID,
			UARTLITE_IRPT_INTR);

	xil_printf("LIDAR: Stopped Scanning\r\n");

	xil_printf("UART: Disabling UartLite Intr System\r\n");
	UartLiteDisableIntrSystem(&IntcInstance, UARTLITE_DEVICE_ID);

	// Clear the LIDAR_MOTOR bit
	XGpio_DiscreteClear(&Gpio, CHANNEL, LIDAR_MOTOR);

	vTaskDelete( xTestProc );
	vTaskDelete( xArmCont  );

	xil_printf("TEST: Ended Test !!!\r\n");

}



/****************************************************************************
*
* This function clears the GPIO channel before writing to the LIDAR MOTOR
* bit on this channel. This will rotate the DC motor on the RPLIDAR device.
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void startLidarMotor(void){
	// Clear the LIDAR_MOTOR bit
	XGpio_DiscreteClear(&Gpio, CHANNEL, LIDAR_MOTOR);

	// Set the LIDAR_MOTOR to High
	XGpio_DiscreteWrite(&Gpio, CHANNEL, LIDAR_MOTOR);
}


/****************************************************************************
*
* This function will initialize the UartLite driver and perform a self test.
* It then sends a 2 byte word over the AXI-UartLite interface to the
* RPLIDAR device. This word will trigger the scan operation on the device.
*
* This function sends data through the UartLite.
*
* This function uses the interrupt driver mode of the UartLite.  The calls to
* the  UartLite driver in the interrupt handlers, should only use the
* non-blocking calls.
*
* @param	IntcInstancePtr is a pointer to the instance of INTC driver.
* @param	UartLiteInstPtr is a pointer to the instance of UartLite driver.
* @param	UartLiteDeviceId is the Device ID of the UartLite Device and
*		is the XPAR_<UARTLITE_instance>_DEVICE_ID value from
*		xparameters.h.
* @param	UartLiteIntrId is the Interrupt ID and is typically
*		XPAR_<INTC_instance>_<UARTLITE_instance>_VEC_ID value from
*		xparameters.h.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
int UartLiteInit(INTC *IntcInstancePtr,
			XUartLite *UartLiteInstPtr,
			u16 UartLiteDeviceId,
			u16 UartLiteIntrId){

	int Status;

	// Initialize the UartLite driver so that it's ready to use.
	Status = XUartLite_Initialize(UartLiteInstPtr, UartLiteDeviceId);
	if (Status != XST_SUCCESS) {
		xil_printf("UART: UartLite Initialize\n");

		return XST_FAILURE;
	}

//	// Perform a self-test to ensure that the hardware was built correctly.
//	Status = XUartLite_SelfTest(UartLiteInstPtr);
//	if (Status != XST_SUCCESS) {
//		xil_printf("UART: UartLite SelfTest Failed\n");
//		return XST_FAILURE;
//	}

	// Connect the UartLite to the interrupt subsystem such that interrupts
	// can occur. This function is application specific.
	Status = UartLiteSetupIntrSystem(IntcInstancePtr,
					 UartLiteInstPtr,
					 UartLiteIntrId);
	if (Status != XST_SUCCESS) {
		xil_printf("UART: UartLite Setup Intc Failed\n");
		return XST_FAILURE;
	}

	// Setup the handlers for the UartLite that will be called from the
	// interrupt context when data has been sent and received,
	// specify a pointer to the UartLite driver instance as the callback
	// reference so the handlers are able to access the instance data.
	XUartLite_SetSendHandler(UartLiteInstPtr, UartLiteSendHandler,
							 UartLiteInstPtr);
	XUartLite_SetRecvHandler(UartLiteInstPtr, UartLiteRecvHandler,
							 UartLiteInstPtr);

	//Enable the interrupt of the UartLite so that the interrupts will occur.
	XUartLite_EnableInterrupt(UartLiteInstPtr);

	return XST_SUCCESS;
}


/****************************************************************************
*
* This function will initialize the UartLite driver and perform a self test.
* It then sends a 2 byte word over the AXI-UartLite interface to the
* RPLIDAR device. This word will trigger the scan operation on the device.
*
* This function sends data through the UartLite.
*
* This function uses the interrupt driver mode of the UartLite.  The calls to
* the  UartLite driver in the interrupt handlers, should only use the
* non-blocking calls.
*
* @param	IntcInstancePtr is a pointer to the instance of INTC driver.
* @param	UartLiteInstPtr is a pointer to the instance of UartLite driver.
* @param	UartLiteDeviceId is the Device ID of the UartLite Device and
*		is the XPAR_<UARTLITE_instance>_DEVICE_ID value from
*		xparameters.h.
* @param	UartLiteIntrId is the Interrupt ID and is typically
*		XPAR_<INTC_instance>_<UARTLITE_instance>_VEC_ID value from
*		xparameters.h.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
int UartLiteStartScan(INTC *IntcInstancePtr,
			XUartLite *UartLiteInstPtr,
			u16 UartLiteDeviceId,
			u16 UartLiteIntrId){

	int Status;

	// trigger the LIDAR to start scanning
	Status = UartLiteInit(&IntcInstance,
			&UartLiteInst,
			UARTLITE_DEVICE_ID,
			UARTLITE_IRPT_INTR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Initialize the send buffer bytes with a pattern to send.
	SendBuffer[0] = 0xA5;
	SendBuffer[1] = 0x20;

	// Send the buffer using the UartLite.
	XUartLite_Send(UartLiteInstPtr, SendBuffer, SEND_BUFFER_SIZE);

	return XST_SUCCESS;
}



/****************************************************************************
*
* This function will initialize the UartLite driver and perform a self test.
* It then sends a 2 byte word over the AXI-UartLite interface to the
* RPLIDAR device. This word will stop the scan operation on the device.
*
* This function sends data through the UartLite.
*
* This function uses the interrupt driver mode of the UartLite.  The calls to
* the  UartLite driver in the interrupt handlers, should only use the
* non-blocking calls.
*
* @param	IntcInstancePtr is a pointer to the instance of INTC driver.
* @param	UartLiteInstPtr is a pointer to the instance of UartLite driver.
* @param	UartLiteDeviceId is the Device ID of the UartLite Device and
*		is the XPAR_<UARTLITE_instance>_DEVICE_ID value from
*		xparameters.h.
* @param	UartLiteIntrId is the Interrupt ID and is typically
*		XPAR_<INTC_instance>_<UARTLITE_instance>_VEC_ID value from
*		xparameters.h.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
int UartLiteStopScan(INTC *IntcInstancePtr,
			XUartLite *UartLiteInstPtr,
			u16 UartLiteDeviceId,
			u16 UartLiteIntrId){

	// Initialize the send buffer bytes with a pattern to send.
	SendBuffer[0] = 0xA5;
	SendBuffer[1] = 0x25;

	// Send the buffer using the UartLite.
	XUartLite_Send(UartLiteInstPtr, SendBuffer, SEND_BUFFER_SIZE);

	return XST_SUCCESS;
}



/****************************************************************************
*
* This function does a minimal test on the UartLite device and driver as a
* design example. The purpose of this function is to illustrate how to use
* the XUartLite component.
*
* This function sends data through the UartLite.
*
* This function uses the interrupt driver mode of the UartLite.  The calls to
* the  UartLite driver in the interrupt handlers, should only use the
* non-blocking calls.
*
* @param	IntcInstancePtr is a pointer to the instance of INTC driver.
* @param	UartLiteInstPtr is a pointer to the instance of UartLite driver.
* @param	UartLiteDeviceId is the Device ID of the UartLite Device and
*		is the XPAR_<UARTLITE_instance>_DEVICE_ID value from
*		xparameters.h.
* @param	UartLiteIntrId is the Interrupt ID and is typically
*		XPAR_<INTC_instance>_<UARTLITE_instance>_VEC_ID value from
*		xparameters.h.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
* This function contains an infinite loop such that if interrupts are not
* working it may never return.
*
****************************************************************************/
int UartLiteSampleLidar(INTC *IntcInstancePtr,
			XUartLite *UartLiteInstPtr,
			u16 UartLiteDeviceId,
			u16 UartLiteIntrId){

	int Status;

	// trigger the LIDAR to start scanning
	Status = UartLiteInit(&IntcInstance,
			&UartLiteInst,
			UARTLITE_DEVICE_ID,
			UARTLITE_IRPT_INTR);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// this a packet buffer used to form packets from the sampled data
	u8 packet[PACKET_SIZE];

	// this flag ensures the handler processes the interrupt
	intrFlag = 1;

	// fill the receive buffer with incoming data
	XUartLite_Recv(UartLiteInstPtr, RecvBuffer, RECV_BUFFER_SIZE);

	// Wait for the entire buffer to be filled,  the function may get
	// locked up in this loop if the interrupts are not working correctly.
	while(TotalRecvCount != RECV_BUFFER_SIZE){}

	// reset the for next sample
	TotalRecvCount = 0;

	int measurements = 0;	// number of measurements in the sample
	int firstAngle = 0;	// saves the angle of the first measurement
	int minDist = 500;		// minimum distance in entire sample
	int minDistAngle = 0;	// angle for the min distance
	int objectFlag = 0;		// flags when an object has been found

	// loop through entire received byte array
	for(int j=0; j<RECV_BUFFER_SIZE; j++){

		// the first byte of a packet containing information is either 0x3E or 0x2.
		// So we wait for either form a packet.
		if (RecvBuffer[j] == 0x3E || RecvBuffer[j] == 0x2) {

			// fill packet buffer while incrementing loop
			packet[0] = RecvBuffer[j++];
			packet[1] = RecvBuffer[j++];
			packet[2] = RecvBuffer[j++];
			packet[3] = RecvBuffer[j++];
			packet[4] = RecvBuffer[j];
//			xil_printf("0x%x, 0x%x, 0x%x, 0x%x, 0x%x\n", packet[0], packet[1], packet[2], packet[3], packet[4]);

			// form bits to verify the quality of the packet
			int scan_start      = packet[0] & 1;	// start scan bit indicates if this is the first packet in a sample
			int inv_scan_start  = packet[0] & 2;	// inverse of the start scan bit
			int check_bit       = packet[1] & 1;	// quality check bit

			// getting the angle in degrees
			int angle_q6	= (((packet[1] >> 1) & 0x7F) | (packet[2] << 7)) / 64.0;
			// getting the distance in millimeters
			int distance_q2	= ((packet[3] | (packet[4] << 8)) * 1.0) / 4.0;

			// quality check on the packet
			// if corrupted move to next packet in buffer
			if ((scan_start == inv_scan_start) || !check_bit){
				continue;  // invalid packet
			}

			// if this is the first packet found in sample
			// set the first angle variable
			if (!measurements){
				firstAngle = angle_q6;
			}

			// if packets found is over 300 and angle is greater than first angle
			// we have completed 360 degree scan
			if (measurements > 300 && firstAngle > angle_q6){
				break;
			}

			// if distance is not 0
			if (distance_q2){
				// we only care about objects between 45 and 135 degrees
				if (angle_q6 >= 45 && angle_q6 <= 135){
					// if current distance is less than min distance
					// we flag that an object was found and set min params
					if(distance_q2 < minDist){
						objectFlag = 1;
						minDist = distance_q2;
						minDistAngle = angle_q6;
					}
//					xil_printf("Angle: %d - Distance: %d\n", angle_q6, distance_q2);
				}
			}
			// increment number of measurements
			measurements++;
		}
	}
	// if object was detected during scan
	if (objectFlag){
		currentObject.angle		= minDistAngle;
		currentObject.distance	= minDist;
		xil_printf("LIDAR: Angle: %d - Distance: %d\n", minDistAngle, minDist);

//		int q2_angle = -1 * acos((((pow(minDist,2)) - (pow(UPPER_ARM,2)) - (pow(LOWER_ARM,2))) / (2 * UPPER_ARM * LOWER_ARM)));
//		int q1_angle = atan((LOWER_ARM * sin(q2_angle)) / (UPPER_ARM + (LOWER_ARM * cos(q2_angle))));

//		int q2_angle = (pow(minDist, 2) - pow(UPPER_ARM,2) - pow(LOWER_ARM,2));// / (2 * UPPER_ARM * LOWER_ARM);
//		int q1_angle = atan((LOWER_ARM * sin(q2_angle)) / (UPPER_ARM + (LOWER_ARM * cos(q2_angle))));
//
//		xil_printf("OBJECT: Angle: %d, Distance: %d  -  Q1 = %d, Q2 = %d\n", minDistAngle, minDist, q1_angle, q2_angle);
	}

//	xil_printf("First Angle: %d\n", first_angle);
//	xil_printf("Measurements per sample: %d\n\n", measurements);

	return XST_SUCCESS;
}


/****************************************************************************
*
* This function is the handler which performs processing to send data to the
* UartLite. It is called from an interrupt context such that the amount of
* processing performed should be minimized. It is called when the transmit
* FIFO of the UartLite is empty and more data can be sent through the UartLite.
*
* @param	CallBackRef contains a callback reference from the driver.
*		In this case it is the instance pointer for the UartLite driver.
* @param	EventData contains the number of bytes sent or received for sent
*		and receive events.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
static void UartLiteSendHandler(void *CallBackRef, unsigned int EventData){

	// verifying the number of bytes sent to LIDAR
	TotalSentCount = EventData;
	xil_printf("UART: Send Buffer Length: %d\n\n", TotalSentCount);
}


/****************************************************************************
*
* This function is the handler which performs processing to receive data from
* the UartLite. It is called from an interrupt context such that the amount of
* processing performed should be minimized. It is called when any data is
* present in the receive FIFO of the UartLite such that the data can be
* retrieved from the UartLite. The amount of data present in the FIFO is not
* known when this function is called.
*
* @param	CallBackRef contains a callback reference from the driver,
*		in this case it is the instance pointer for the UartLite driver.
* @param	EventData contains the number of bytes sent or received for sent
*		and receive events.
*
* @return	None.
*
* @note		None.
*
****************************************************************************/
static void UartLiteRecvHandler(void *CallBackRef, unsigned int EventData){

	// if the flag is set be process the interrupt
	// we set the total number of bytes currently in the buffer
	if (intrFlag){
		TotalRecvCount = EventData;
//		xil_printf("Recv Buffer Length: %d\n", TotalRecvCount);
		intrFlag=0;
	}
}


/****************************************************************************
*
* This function setups the interrupt system such that interrupts can occur
* for the UartLite.
*
* @param	IntcInstancePtr is a pointer to the instance of INTC driver.
* @param	UartLiteInstPtr is a pointer to the instance of UartLite driver.
*		XPAR_<UARTLITE_instance>_DEVICE_ID value from xparameters.h.
* @param	UartLiteIntrId is the Interrupt ID and is typically
*		XPAR_<INTC_instance>_<UARTLITE_instance>_VEC_ID
*		value from xparameters.h.
*
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
* @note		None.
*
****************************************************************************/
int UartLiteSetupIntrSystem(INTC *IntcInstancePtr,
		XUartLite *UartLiteInstPtr,
		u16 UartLiteIntrId){

	int Status;


	// Initialize the interrupt controller driver so that it is ready to use.
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XScuGic_SetPriorityTriggerType(IntcInstancePtr, UartLiteIntrId,
					0xA0, 0x3);

	// Connect the interrupt handler that will be called when an interrupt occurs for the device.
	Status = XScuGic_Connect(IntcInstancePtr, UartLiteIntrId,
				 (Xil_ExceptionHandler)XUartLite_InterruptHandler,
				 UartLiteInstPtr);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	// Enable the interrupt for the Timer device.
	XScuGic_Enable(IntcInstancePtr, UartLiteIntrId);


	// Initialize the exception table.
	Xil_ExceptionInit();

	// Register the interrupt controller handler with the exception table.
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)INTC_HANDLER,
			IntcInstancePtr);

	// Enable exceptions.
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}


/*****************************************************************************
*
* This function disables the interrupts that occur for the UartLite.
*
* @param	IntcInstancePtr is a pointer to the instance of the INTC driver.
* @param	UartLiteIntrId is the Interrupt ID and is typically
*		XPAR_<INTC_instance>_<UARTLITE_instance>_VEC_ID
*		value from xparameters.h.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void UartLiteDisableIntrSystem(INTC *IntcInstancePtr, u16 UartLiteIntrId){

	// Disconnect and disable the interrupt for the UartLite.
	XScuGic_Disable(IntcInstancePtr, UartLiteIntrId);
	XScuGic_Disconnect(IntcInstancePtr, UartLiteIntrId);
}


/******************************************************************************
*
* TEST STATES
*
******************************************************************************/
void home_position(void){
	baseDutyCycle = dutyCycle(90);
	shoulderDutyCycle = dutyCycle(0);
	elbowDutyCycle = dutyCycle(90);
	clawDutyCycle = dutyCycle(90);
	inPos = 1;
}

void find_object(void){
	if (baseDutyCycle > dutyCycle(45)){
//		xil_printf("ARM: Move base to angle: %d\n", baseDutyCycle);
		baseDutyCycle = baseDutyCycle - ANGLE_SHIFT;
		shoulderDutyCycle = dutyCycle(0);
		elbowDutyCycle = dutyCycle(90);
		clawDutyCycle = dutyCycle(90);
	}
	else {
		inPos = 1;
	}
}

void pickup_object(void){
	if (!picked){
		xil_printf("TEST: Object Not Picked\n");
		if (shoulderDutyCycle < dutyCycle(50)){
			shoulderDutyCycle = shoulderDutyCycle + ANGLE_SHIFT;
		}
		if (elbowDutyCycle > dutyCycle(45)){
			elbowDutyCycle = elbowDutyCycle - ANGLE_SHIFT;
		}
		if ((shoulderDutyCycle >= dutyCycle(50)) && (elbowDutyCycle <= dutyCycle(45))){
			picked=1;
			clawDutyCycle = dutyCycle(180);
		} else {
			picked=0;
			clawDutyCycle = dutyCycle(90);
		}
	} else {
		xil_printf("TEST: Object Picked\n");
		if (shoulderDutyCycle > dutyCycle(0)){
			shoulderDutyCycle = shoulderDutyCycle - ANGLE_SHIFT;
		}
		if (elbowDutyCycle < dutyCycle(90)){
			elbowDutyCycle = elbowDutyCycle + ANGLE_SHIFT;
		}
		if ((shoulderDutyCycle <= dutyCycle(0)) && (elbowDutyCycle >= dutyCycle(90))){
			inPos = 1;
		}
	}
}

void goto_target_location(void){
	if (baseDutyCycle < dutyCycle(135)){
//		xil_printf("ARM: Move base to angle: %d\n", baseDutyCycle);
		baseDutyCycle = baseDutyCycle + ANGLE_SHIFT;
		shoulderDutyCycle = dutyCycle(0);
		elbowDutyCycle = dutyCycle(90);
		clawDutyCycle = dutyCycle(180);
	}
	else {
		inPos = 1;
	}
}

void putdown_object(void){
	if (!dropped){
		xil_printf("TEST: Object Not Dropped\n");
		if (shoulderDutyCycle < dutyCycle(50)){
			shoulderDutyCycle = shoulderDutyCycle + ANGLE_SHIFT;
		}
		if (elbowDutyCycle > dutyCycle(45)){
			elbowDutyCycle = elbowDutyCycle - ANGLE_SHIFT;
		}
		if ((shoulderDutyCycle >= dutyCycle(50)) && (elbowDutyCycle <= dutyCycle(45))){
			dropped=1;
			clawDutyCycle = dutyCycle(90);
		} else {
			dropped=0;
			clawDutyCycle = dutyCycle(180);
		}
	} else {
		xil_printf("TEST: Object Dropped\n");
		if (shoulderDutyCycle > dutyCycle(0)){
			shoulderDutyCycle = shoulderDutyCycle - ANGLE_SHIFT;
		}
		if (elbowDutyCycle < dutyCycle(90)){
			elbowDutyCycle = elbowDutyCycle + ANGLE_SHIFT;
		}
		if ((shoulderDutyCycle <= dutyCycle(0)) && (elbowDutyCycle >= dutyCycle(90))){
			inPos = 1;
		}
	}
}
