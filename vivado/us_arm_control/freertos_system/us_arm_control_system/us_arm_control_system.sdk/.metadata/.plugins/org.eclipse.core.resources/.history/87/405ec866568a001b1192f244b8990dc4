/******************************************************************************
*
* Copyright (C) 2002 - 2015 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/
/*****************************************************************************/
/**
* @file ultrasonic_sensor_driver.c
*
* This file contains a design for an Ultrasonic Sensor (HC-SR04) driver using the AXI GPIO driver (XGpio) and
* hardware device.  It only uses channel 1 of a GPIO device and assumes that
* the bit 0 of the GPIO is connected to the sensor Trigger pin and bit 1 to the Echo pin on the HW board.
*
******************************************************************************/

/***************************** Include Files *********************************/

#include <stdio.h>
#include "xparameters.h"
#include "xgpio.h"
#include "xil_printf.h"
#include "xtime_l.h"

#include "xtmrctr.h"
#include "xil_exception.h"

#include "xscugic.h"

/* FreeRTOS includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"

#define TIMER_ID	1
#define DELAY_10_SECONDS	10000UL
#define DELAY_1_SECOND		1000UL
#define DELAY_1_MSECOND		1UL
#define TIMER_CHECK_THRESHOLD	9

static TaskHandle_t xTestProc;
static TaskHandle_t xUltrDetc0;
static TaskHandle_t xUltrDetc1;
static TaskHandle_t xUltrDetc2;
static TaskHandle_t xUltrDetc3;
static TaskHandle_t xBaseCont;
static TaskHandle_t xShouCont;
static TaskHandle_t xElboCont;
static TaskHandle_t xClawCont;


/************************** Constant Definitions *****************************/

#define US0_TRIG 0x1   // Assumes bit 0 of GPIO is connected to US0 TRIG pin
#define US0_ECHO 0x2   // Assumes bit 1 of GPIO is connected to US0 ECHO pin
#define US0_BOTH 0x3   // Mask for both TRIG and ECHO GPIO pins

#define US1_TRIG 0x4   // Assumes bit 2 of GPIO is connected to US1 TRIG pin
#define US1_ECHO 0x8   // Assumes bit 3 of GPIO is connected to US1 ECHO pin
#define US1_BOTH 0xC   // Mask for both TRIG and ECHO GPIO pins

#define US2_TRIG 0x10  // Assumes bit 4 of GPIO is connected to US2 TRIG pin
#define US2_ECHO 0x20  // Assumes bit 5 of GPIO is connected to US2 ECHO pin
#define US2_BOTH 0x30  // Mask for both TRIG and ECHO GPIO pins

#define US3_TRIG 0x40  // Assumes bit 6 of GPIO is connected to US3 TRIG pin
#define US3_ECHO 0x80  // Assumes bit 7 of GPIO is connected to US3 ECHO pin
#define US3_BOTH 0xC0  // Mask for both TRIG and ECHO GPIO pins

#define GPIO_0_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID

// The following constant is used to specify the amount of
// distance measurements performed per output reading
#define TOTAL_CALC	10

// The following constant is used to determine which channel of the GPIO is
// used for the sensor pins if there are 2 channels supported.
#define CHANNEL 1

// The following constants are used for the PWM pins.
#define BASE_SERVO_DEVICE_ID		XPAR_TMRCTR_0_DEVICE_ID
#define SHOULDER_SERVO_DEVICE_ID	XPAR_TMRCTR_1_DEVICE_ID
#define ELBOW_SERVO_DEVICE_ID		XPAR_TMRCTR_2_DEVICE_ID
#define CLAW_SERVO_DEVICE_ID		XPAR_TMRCTR_3_DEVICE_ID

#define BASE_SERVO_INTERRUPT_ID		XPAR_FABRIC_TMRCTR_0_VEC_ID
#define SHOULDER_SERVO_INTERRUPT_ID	XPAR_FABRIC_TMRCTR_1_VEC_ID
#define ELBOW_SERVO_INTERRUPT_ID	XPAR_FABRIC_TMRCTR_2_VEC_ID
#define CLAW_SERVO_INTERRUPT_ID		XPAR_FABRIC_TMRCTR_3_VEC_ID

#define INTC_DEVICE_ID          XPAR_SCUGIC_SINGLE_DEVICE_ID
#define INTC                    XScuGic
#define INTC_HANDLER            XScuGic_InterruptHandler

#define PWM_PERIOD              50000000    // PWM period in (.500 ms)
#define PWM_MIN_HIGH            277777      // PWM minimujm high time (.00278 ms)
#define TMRCTR_0                0           // Timer 0 ID
#define TMRCTR_1                1           // Timer 1 ID
#define CYCLE_PER_DUTYCYCLE     10          // Clock cycles per duty cycle
#define MAX_DUTYCYCLE           100         // Max duty cycle
#define DUTYCYCLE_DIVISOR       4           // Duty cycle Divisor
#define WAIT_COUNT              PWM_PERIOD	// Interrupt wait counter
#define ANGLE_SHIFT				5			// degrees to shift arm


/************************** Function Prototypes ******************************/


int TmrCtrPwmConfig(
		INTC *IntcInstancePtr,
		XTmrCtr *InstancePtr,
		u16 DeviceId,
		u16 IntrId,
		u8 Div);

static void TimerCounterHandler(
		void *CallBackRef,
		u8 TmrCtrNumber);

static int TmrCtrSetupIntrSystem(
		INTC *IntcInstancePtr,
		XTmrCtr *InstancePtr,
		u16 DeviceId,
		u16 IntrId);

static void TmrCtrDisableIntr(
		INTC *IntcInstancePtr,
		u16 IntrId);


// Scheduler Tasks
static void testProcedure( void *pvParameters );
static void ultrasonicDetection0( void *pvParameters );
static void ultrasonicDetection1( void *pvParameters );
static void ultrasonicDetection2( void *pvParameters );
static void ultrasonicDetection3( void *pvParameters );
static void baseControl( void *pvParameters );
static void shoulderControl( void *pvParameters );
static void elbowControl( void *pvParameters );
static void clawControl( void *pvParameters );

// other
float get_distance(int SENSOR);
float get_mode(float list[]);
void _delay_();

// Test Procedure Tasks
void home_position(void);
void rotate_arm(void);
void endOfTestHandler(void);


/************************** Variable Definitions *****************************/

XGpio Gpio; // The Instance of the GPIO Driver
INTC InterruptController;  // The instance of the Interrupt Controller
XTmrCtr TimerCounterInst;  // The instance of the Timer Counter

static int   PeriodTimerHit	= FALSE;
static int   HighTimerHit	= FALSE;

int FINISHED 	= 0;	// end of test flag
int TEST_STATE 	= 0;	// current test state

int US_MASK = 1;
int inPos = 0;
int shift;

int baseAngle		= 0;	// start angle of the base servo
int shoulderAngle	= 0;	// start angle of the shoulder servo
int elbowAngle		= 90;	// start angle of the elbow servo
int clawAngle		= 90;	// start angle of the claw servo

XTime tStart_React, tEnd_React;


/*****************************************************************************/
//////////
// main //
//////////
int main(void){

	xil_printf("\n>>> Start LIDAR object detection and ARM control\r\n\n");
	// application health status
	int Status;

	// Initialize the GPIO driver
	Status = XGpio_Initialize(&Gpio, GPIO_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("Gpio Initialization Failed\r\n");
		return XST_FAILURE;
	}

	// Set the direction for all signals as inputs except the TRIG output
	XGpio_SetDataDirection(&Gpio, CHANNEL, ~(US0_TRIG & US1_TRIG & US2_TRIG & US3_TRIG));

	/////////////////////
	// Scheduler Tasks //
	/////////////////////
	xTaskCreate( testProcedure,
			"Test Procedure",
			1024,
			NULL,
			tskIDLE_PRIORITY,
			&xTestProc );

	xTaskCreate( ultrasonicDetection0,
			"Ultrasonic Detection",
			1024,
			NULL,
			tskIDLE_PRIORITY,
			&xUltrDetc0 );

//	xTaskCreate( ultrasonicDetection1,
//			"Ultrasonic Detection",
//			1024,
//			NULL,
//			tskIDLE_PRIORITY,
//			&xUltrDetc1 );
//
//	xTaskCreate( ultrasonicDetection2,
//			"Ultrasonic Detection",
//			1024,
//			NULL,
//			tskIDLE_PRIORITY,
//			&xUltrDetc2 );
//
//	xTaskCreate( ultrasonicDetection3,
//			"Ultrasonic Detection",
//			1024,
//			NULL,
//			tskIDLE_PRIORITY,
//			&xUltrDetc3 );

	xTaskCreate( baseControl,
			"Base Control",
			2048,
			NULL,
			tskIDLE_PRIORITY,
			&xBaseCont );

	xTaskCreate( shoulderControl,
			"Shoulder Control",
			2048,
			NULL,
			tskIDLE_PRIORITY,
			&xShouCont );

	xTaskCreate( elbowControl,
			"Elbow Control",
			2048,
			NULL,
			tskIDLE_PRIORITY,
			&xElboCont );

	xTaskCreate( clawControl,
			"Claw Control",
			2048,
			NULL,
			tskIDLE_PRIORITY,
			&xClawCont );


	/* Start the tasks and timer running. */
	vTaskStartScheduler();


	while(1);

}



/****************************************************************************
*
* This function executes the Lidar test procedure.
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void testProcedure( void *pvParameters ){

	xil_printf("TASK 1: TEST PROCEDURE\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	while(1){
		switch (TEST_STATE){
		case 0:
			if(!inPos){
				xil_printf("TEST: Home Position\r\n");
				home_position();
			} else {
				_delay_(3000000);
				TEST_STATE = 1;
				inPos = 0;
				xil_printf("TEST: Starting Test !!!\r\n");
		//			xil_printf("TEST: Moving to STATE 1\r\n");
			}
			break;

		case 1:
			if(!inPos){
				rotate_arm();
			} else {
				TEST_STATE = 2;
				inPos = 0;
		//			xil_printf("TEST: Moving to STATE 2\r\n");
			}
			break;

		case 2:
			if(!inPos){
				_delay_(1000000);
				home_position();
			} else {
				FINISHED = 1;
				inPos = 0;
				endOfTestHandler();
			}
			break;
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}



/****************************************************************************
*
* This function controls the ultrasonic sampling
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void ultrasonicDetection0( void *pvParameters ){


	xil_printf("TASK 2: ULTRASONIC SCANNING\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	// list of distance measurements
	float dist0_list[TOTAL_CALC];
	// init vars for mode values
	float mode0_dist;

	while(1){
		// take several measurements
		for(int i = 0; i < TOTAL_CALC; i++){
			// add readings to lists
			dist0_list[i] = get_distance(0);
			// sensor hardware requires 2ms delay between measurements
			//_delay_(2000);
		}

		// find the model value from all readings
		mode0_dist = get_mode(dist0_list);
		printf("\nUS0_Distance: %f mm", mode0_dist);

		// if any measurements are less than 100 mm mask is 0
		if (mode0_dist < 100){
			US_MASK = 0;
		}
		else{
			US_MASK = 1;
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}



/****************************************************************************
*
* This function controls the ultrasonic sampling
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void ultrasonicDetection1( void *pvParameters ){


	xil_printf("TASK 3: ULTRASONIC SCANNING\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	// list of distance measurements
	float dist1_list[TOTAL_CALC];
	// init vars for mode values
	float mode1_dist;

	while(1){
		// take several measurements
		for(int i = 0; i < TOTAL_CALC; i++){
			// add readings to lists
			dist1_list[i] = get_distance(0);
			// sensor hardware requires 2ms delay between measurements
			//_delay_(2000);
		}

		// find the model value from all readings
		mode1_dist = get_mode(dist1_list);
		printf("\nUS1_Distance: %f mm", mode1_dist);

		// if any measurements are less than 100 mm mask is 0
		if (mode1_dist < 100){
			US_MASK = 0;
		}
		else{
			US_MASK = 1;
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}



/****************************************************************************
*
* This function controls the ultrasonic sampling
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void ultrasonicDetection2( void *pvParameters ){


	xil_printf("TASK 4: ULTRASONIC SCANNING\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	// list of distance measurements
	float dist2_list[TOTAL_CALC];
	// init vars for mode values
	float mode2_dist;

	while(1){
		// take several measurements
		for(int i = 0; i < TOTAL_CALC; i++){
			// add readings to lists
			dist2_list[i] = get_distance(0);
			// sensor hardware requires 2ms delay between measurements
			//_delay_(2000);
		}

		// find the model value from all readings
		mode2_dist = get_mode(dist2_list);
		printf("\nUS2_Distance: %f mm", mode2_dist);

		// if any measurements are less than 100 mm mask is 0
		if (mode2_dist < 100){
			US_MASK = 0;
		}
		else{
			US_MASK = 1;
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}



/****************************************************************************
*
* This function controls the ultrasonic sampling
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void ultrasonicDetection3( void *pvParameters ){


	xil_printf("TASK 5: ULTRASONIC SCANNING\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	// list of distance measurements
	float dist3_list[TOTAL_CALC];
	// init vars for mode values
	float mode3_dist;

	while(1){
		// take several measurements
		for(int i = 0; i < TOTAL_CALC; i++){
			// add readings to lists
			dist3_list[i] = get_distance(0);
			// sensor hardware requires 2ms delay between measurements
			//_delay_(2000);
		}

		// find the model value from all readings
		mode3_dist = get_mode(dist3_list);
		printf("\nUS3_Distance: %f mm", mode3_dist);

		// if any measurements are less than 100 mm mask is 0
		if (mode3_dist < 100){
			US_MASK = 0;
		}
		else{
			US_MASK = 1;
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}



/****************************************************************************
*
* This function controls the behaviour of the base servo
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
static void baseControl( void *pvParameters ){
//void armControl(){

	xil_printf("TASK 6: BASE_SERVO PWM\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	int Status;

	while(1){
		// Run the Timer Counter for BASE_SERVO PWM
		Status = TmrCtrPwmConfig(&InterruptController,
				&TimerCounterInst,
				BASE_SERVO_DEVICE_ID,
				BASE_SERVO_INTERRUPT_ID,
				baseAngle);
		if (Status != XST_SUCCESS) {
			xil_printf("PWM: BASE_SERVO PWM Failed\r\n");
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}

/****************************************************************************
*
* This function controls the behaviour of the shoulder servo
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
static void shoulderControl( void *pvParameters ){
//void armControl(){

	xil_printf("TASK 7: SHOULDER_SERVO PWM\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	int Status;

	while(1){
		// Run the Timer Counter for SHOULDER_SERVO PWM
		Status = TmrCtrPwmConfig(&InterruptController,
				&TimerCounterInst,
				SHOULDER_SERVO_DEVICE_ID,
				SHOULDER_SERVO_INTERRUPT_ID,
				shoulderAngle);
		if (Status != XST_SUCCESS) {
			xil_printf("SHOULDER_SERVO PWM Failed\r\n");
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}

/****************************************************************************
*
* This function controls the behaviour of the elbow servo
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
static void elbowControl( void *pvParameters ){
//void armControl(){

	xil_printf("TASK 8: ELBOW_SERVO PWM\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	int Status;

	while(1){
		// Run the Timer Counter for ELBOW_SERVO PWM
		Status = TmrCtrPwmConfig(&InterruptController,
				&TimerCounterInst,
				ELBOW_SERVO_DEVICE_ID,
				ELBOW_SERVO_INTERRUPT_ID,
				elbowAngle);
		if (Status != XST_SUCCESS) {
			xil_printf("ELBOW_SERVO PWM Failed\r\n");
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}

/****************************************************************************
*
* This function controls the behaviour of the claw servo
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
static void clawControl( void *pvParameters ){
//void armControl(){

	xil_printf("TASK 9: CLAW_SERVO PWM\r\n");
	const TickType_t x1msecond = pdMS_TO_TICKS( DELAY_1_MSECOND );

	int Status;

	while(1){
		// Run the Timer Counter for CLAW_SERVO PWM
		Status = TmrCtrPwmConfig(&InterruptController,
				&TimerCounterInst,
				CLAW_SERVO_DEVICE_ID,
				CLAW_SERVO_INTERRUPT_ID,
				clawAngle);
		if (Status != XST_SUCCESS) {
			xil_printf("CLAW_SERVO PWM Failed\r\n");
		}
		// Scheduler Delay
		vTaskDelay(x1msecond);
	}
}



/*****************************************************************************/
/**
* This function is used to obtain the most occurring measurement in the list of samples
*
* @param	None.
*
* @return	XST_SUCCESS to indicate success, else XST_FAILURE to indicate a
*		Failure.
*
* @note		None.
*
******************************************************************************/
float get_mode(float list[]) {

   int modeValue = 0, modeCount = 0, i, j;

   /* loop through list of values */
   for (i = 0; i < TOTAL_CALC; ++i) {
      int count = 0;

      /* count number of occurrences */
      for (j = 0; j < TOTAL_CALC; ++j) {
         if (list[j] == list[i])
         count++;
      }

      /* check if value is the mode */
      if (count > modeCount) {
         modeCount = count;
         modeValue = list[i];
      }
   }
   /* return the mode value */
   return modeValue;
}



/*****************************************************************************/
/**
* This function is used to obtain measurements from the ultrasonic sensor
*
* @param	None.
*
* @return	XST_SUCCESS to indicate success, else XST_FAILURE to indicate a
*		Failure.
*
* @note		None.
*
******************************************************************************/
float get_distance(int SENSOR){

	XTime tStart, tEnd;
	int TRIG, ECHO, BOTH;

	switch (SENSOR){
	case 0:
		TRIG = US0_TRIG;
		ECHO = US0_ECHO;
		BOTH = US0_BOTH;
		break;
	case 1:
		TRIG = US1_TRIG;
		ECHO = US1_ECHO;
		BOTH = US1_BOTH;
		break;
	case 2:
		TRIG = US2_TRIG;
		ECHO = US2_ECHO;
		BOTH = US2_BOTH;
		break;
	case 3:
		TRIG = US3_TRIG;
		ECHO = US3_ECHO;
		BOTH = US3_BOTH;
		break;
	}

	// Clear the TRIG bit
	XGpio_DiscreteClear(&Gpio, CHANNEL, BOTH);
	// Wait 2us so TRIG is low
	_delay_(2);

	// Set the TRIG to High
	XGpio_DiscreteWrite(&Gpio, CHANNEL, TRIG);
	// 10us TRIG high pulse
	_delay_(10);

	// Clear the TRIG bit
	XGpio_DiscreteClear(&Gpio, CHANNEL, TRIG);

	// wait for the echo pulse to begin (rising edge)
	while(!(XGpio_DiscreteRead(&Gpio, CHANNEL) & ECHO)){}
	// record time at rising edge
	XTime_GetTime(&tStart);

	// wait for the echo pulse to end (falling edge)
	while(XGpio_DiscreteRead(&Gpio, CHANNEL) & ECHO){}
	// record time at falling edge
	XTime_GetTime(&tEnd);

	// calculate pulse length in micro-seconds
	float pulse = 1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND/1000000);

	// speed of signal is 343000 mm/sec
	// pulse length time to obstacle and back (x2 distance)
	// calculate distance in millimeters
	float distance = (pulse/1000000)/2 * 343000;

	// clear all pins
	XGpio_DiscreteClear(&Gpio, CHANNEL, BOTH);

	// return measured distance
	return distance;
}



/*****************************************************************************/
/**
* This function demonstrates the use of tmrctr PWM APIs.
*
* @param	IntcInstancePtr is a pointer to the Interrupt Controller
*		driver Instance
* @param	TmrCtrInstancePtr is a pointer to the XTmrCtr driver Instance
* @param	DeviceId is the XPAR_<TmrCtr_instance>_DEVICE_ID value from
*		xparameters.h
* @param	IntrId is XPAR_<INTC_instance>_<TmrCtr_instance>_INTERRUPT_INTR
*		value from xparameters.h
*
* @return	XST_SUCCESS if the Test is successful, otherwise XST_FAILURE
*
* @note		none.
*
*****************************************************************************/
int TmrCtrPwmConfig(
		INTC *IntcInstancePtr,
		XTmrCtr *TmrCtrInstancePtr,
		u16 DeviceId,
		u16 IntrId,
		u8 Div){

	u8  DutyCycle;
	u8  NoOfCycles;
	u32 Period;
	u32 HighTime;
	u64 WaitCount;
	int Status;

	// Initialize the timer counter so that it's ready to use.
	Status = XTmrCtr_Initialize(TmrCtrInstancePtr, DeviceId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Connect the timer counter to the interrupt subsystem.
	Status = TmrCtrSetupIntrSystem(
			IntcInstancePtr,
			TmrCtrInstancePtr,
			DeviceId,
			IntrId);

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Setup the handler for the timer counter that will be called from the
	// interrupt context when the timer expires
	XTmrCtr_SetHandler(
			TmrCtrInstancePtr,
			TimerCounterHandler,
			TmrCtrInstancePtr);

	// Enable the interrupt of the timer counter.
	XTmrCtr_SetOptions(TmrCtrInstancePtr, TMRCTR_0, XTC_INT_MODE_OPTION);
	XTmrCtr_SetOptions(TmrCtrInstancePtr, TMRCTR_1, XTC_INT_MODE_OPTION);

	// Disable PWM for reconfiguration.
	XTmrCtr_PwmDisable(TmrCtrInstancePtr);

	Period = PWM_PERIOD;
	HighTime = PWM_MIN_HIGH + (Div * 12345);

	// Configure PWM
	DutyCycle = XTmrCtr_PwmConfigure(
			TmrCtrInstancePtr,
			Period,
			HighTime);

	if (Status != XST_SUCCESS) {
		Status = XST_FAILURE;
		goto err;
	}

	// Enable PWM
	XTmrCtr_PwmEnable(TmrCtrInstancePtr);

	WaitCount = PWM_PERIOD / 10;
	while (WaitCount > 0) {
		WaitCount--;
	}

	Status = XST_SUCCESS;
err:
	// Disable PWM
	XTmrCtr_PwmDisable(TmrCtrInstancePtr);

	// Disable interrupts
	TmrCtrDisableIntr(IntcInstancePtr, DeviceId);

	return Status;
}


/*****************************************************************************/
/**
* This function is the handler which performs processing for the timer counter.
* It is called from an interrupt context.
*
* @param	CallBackRef is a pointer to the callback function
* @param	TmrCtrNumber is the number of the timer to which this
*		handler is associated with.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
static void TimerCounterHandler(
		void *CallBackRef,
		u8 TmrCtrNumber){

	// Mark if period timer expired
	if (TmrCtrNumber == TMRCTR_0) {
		PeriodTimerHit = TRUE;
	}

	// Mark if high time timer expired
	if (TmrCtrNumber == TMRCTR_1) {
		HighTimerHit = TRUE;
	}
}


/*****************************************************************************/
/**
* This function setups the interrupt system such that interrupts can occur
* for the timer counter. This function is application specific since the actual
* system may or may not have an interrupt controller.  The timer counter could
* be directly connected to a processor without an interrupt controller.  The
* user should modify this function to fit the application.
*
* @param	IntcInstancePtr is a pointer to the Interrupt Controller
*		driver Instance.
* @param	TmrCtrInstancePtr is a pointer to the XTmrCtr driver Instance.
* @param	DeviceId is the XPAR_<TmrCtr_instance>_DEVICE_ID value from
*		xparameters.h.
* @param	IntrId is XPAR_<INTC_instance>_<TmrCtr_instance>_VEC_ID
*		value from xparameters.h.
*
* @return	XST_SUCCESS if the Test is successful, otherwise XST_FAILURE.
*
* @note		none.
*
******************************************************************************/
static int TmrCtrSetupIntrSystem(
		INTC *IntcInstancePtr,
		XTmrCtr *TmrCtrInstancePtr,
		u16 DeviceId,
		u16 IntrId){

	 int Status;

	XScuGic_Config *IntcConfig;

	// Initialize the interrupt controller driver
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XScuGic_SetPriorityTriggerType(
			IntcInstancePtr,
			IntrId,
			0xA0,
			0x3);

	// Connect the interrupt handler that will be called when an interrupt occurs.
	Status = XScuGic_Connect(IntcInstancePtr, IntrId,
				 (Xil_ExceptionHandler)XTmrCtr_InterruptHandler,
				 TmrCtrInstancePtr);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	// Enable the interrupt for the Timer device
	XScuGic_Enable(IntcInstancePtr, IntrId);

	// Initialize the exception table
	Xil_ExceptionInit();

	// Register the interrupt controller handler with the exception table
	Xil_ExceptionRegisterHandler(
			XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) INTC_HANDLER,
			IntcInstancePtr);

	// Enable non-critical exceptions
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}


/******************************************************************************/
/**
*
* This function disconnects the interrupts for the Timer.
*
* @param	IntcInstancePtr is a reference to the Interrupt Controller
*		driver Instance.
* @param	IntrId is XPAR_<INTC_instance>_<Timer_instance>_VEC_ID
*		value from xparameters.h.
*
* @return	None.
*
* @note		None.
*
******************************************************************************/
void TmrCtrDisableIntr(
		INTC *IntcInstancePtr,
		u16 IntrId){

	// Disconnect the interrupt for the timer counter
	XScuGic_Disconnect(IntcInstancePtr, IntrId);
}


/******************************************************************************
*
* TEST STATES
*
******************************************************************************/
void home_position(void){
	shift = ANGLE_SHIFT;
	baseAngle = 0;
	shoulderAngle = 0;
	elbowAngle = 90;
	clawAngle = 90;
	inPos = 1;
}

void rotate_arm(void){

	if (baseAngle == 180){
		shift = -ANGLE_SHIFT;
	}
	if (baseAngle == 0){
		shift = ANGLE_SHIFT;
	}
	if(!US_MASK){
		inPos = 1;
	}

	baseAngle = baseAngle + (shift * US_MASK);
	printf("\n\nAngle - %d - %d\n", shift, baseAngle);
}



// delay function
void _delay_(int useconds){

	float delay;
	XTime tStart, tNext;

	/* get time at start of delay */
	XTime_GetTime(&tStart);

	while(1){
		/* check time for each loop */
		XTime_GetTime(&tNext);

		/* calculate the delay in micro-seconds */
		delay = 1.0 * (tNext - tStart) / (COUNTS_PER_SECOND/1000000);

		/* if the delay is greater than or equal to the specified time, end delay */
		if(delay >= useconds){
			return;
		}
	}
}

/****************************************************************************
*
* This function is run when the test has completed. It will delete all
* scheduler tasks. This will stop rotation of the DC motor on the RPLIDAR device.
*
* @return	void.
*
* @note		None.
*
****************************************************************************/
void endOfTestHandler(void){

	xil_printf("FREERTOS: Stopping all TASKS\r\n");

	// deleting tasks
	vTaskDelete( xTestProc );
	vTaskDelete( xUltrDetc0 );
//	vTaskDelete( xUltrDetc1 );
//	vTaskDelete( xUltrDetc2 );
//	vTaskDelete( xUltrDetc3 );
	vTaskDelete( xBaseCont );
	vTaskDelete( xShouCont );
	vTaskDelete( xElboCont );
	vTaskDelete( xClawCont );

	xil_printf("TEST: Ended Test !!!\r\n");

}

