/******************************************************************************
*
* Copyright (C) 2002 - 2015 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/
/*****************************************************************************/
/**
*
* @file xuartlite_low_level_example.c
*
* This file contains a design example using the low-level driver functions
* and macros of the UartLite driver (XUartLite).
*
* @note
*
* The user must provide a physical loopback such that data which is
* transmitted will be received.
*
* MODIFICATION HISTORY:
* <pre>
* Ver   Who  Date	 Changes
* ----- ---- -------- ---------------------------------------------------------
* 1.00b rpm  04/25/02 First release
* 1.00b sv   06/13/05 Minor changes to comply to Doxygen and coding guidelines
* 2.00a ktn  10/20/09 Updated to use HAL processor APIs and minor changes
*		      for coding guidelines.
* 3.2   ms   01/23/17 Added xil_printf statement in main function to
*                     ensure that "Successfully ran" and "Failed" strings
*                     are available in all examples. This is a fix for
*                     CR-965028.
* </pre>
******************************************************************************/

/***************************** Include Files *********************************/

#include "xparameters.h"
#include "xstatus.h"
#include "xuartlite_l.h"
#include "xil_printf.h"

#include <stdio.h>
#include <string.h>
#include <errno.h>

/************************** Constant Definitions *****************************/


/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define UARTLITE_BASEADDR	   XPAR_UARTLITE_0_BASEADDR

/*
 * The following constant controls the length of the buffers to be sent
 * and received with the UartLite, this constant must be 16 bytes or less so the
 * entire buffer will fit into the transmit and receive FIFOs of the UartLite.
 */
#define TEST_BUFFER_SIZE 16

#ifndef _countof
#define _countof(_Array) (int)(sizeof(_Array) / sizeof(_Array[0])) //macro to get array length
#endif

// Commands that can be sent to RPLIDARs.
// class Command:
#define Stop 0x25
#define Reset 0x40
#define Scan 0x20
#define ExpressScan 0x82
#define ForceScan 0x21
#define GetInfo 0x50
#define GetHealth 0x52
#define GetSampleRate 0x59

// data types returned in data response descriptors
// class ResponseType:
#define ScanData 0x81
#define ExpressScanData 0x82
#define DeviceInfo 0x04
#define HealthInfo 0x06
#define SamplingRate 0x15

// two-bit send modes returned in data response descriptors
// SendMode:
#define SingleResponse 0x00
#define MultipleResponse 0x01

/**************************** Type Definitions *******************************/


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

int UartLiteLowLevelExample(u32 UartliteBaseAddress);
void get_device_info(u32 UartliteBaseAddress, int* devinfo);
void get_health_info(u32 UartliteBaseAddress, int* healthinfo);
void print_response_data(int* data, int len);
void read_response_descriptor(u32 UartliteBaseAddress);
void start_scan(u32 UartliteBaseAddress);
void stop_scan(u32 UartliteBaseAddress);
void poll_scan_samples(u32 UartliteBaseAddress, int* packet, int len);

void print_response_data(int* data, int len){
    for(int i=0; i<len; i++){
        printf("%i ", data[i]);
    }
}

void get_response_data(u32 UartliteBaseAddress, int* data, int len){
    for(int i=0; i<len; i++){
        data[i] = XUartLite_RecvByte(UartliteBaseAddress);
    }
}

/************************** Variable Definitions *****************************/

/*
 * The following buffers are used in this example to send and receive data
 * with the UartLite.
 */
u8 SendBuffer[TEST_BUFFER_SIZE]; /* Buffer for Transmitting Data */
u8 RecvBuffer[TEST_BUFFER_SIZE]; /* Buffer for Receiving Data */


/*****************************************************************************/
/**
*
* Main function to call the example.
*
* @param	None.
*
* @return	XST_SUCCESS if successful, XST_FAILURE if unsuccessful.
*
* @note		None.
*
******************************************************************************/
int main(void)
{

    while(1){
        poll_scan_samples(UARTLITE_BASEADDR, packet, packet_size);

        int scan_start      = packet[0] & 1;
//        int inv_scan_start  = packet[0] & 2;
//        int check_bit       = packet[1] & 1;

        float angle_q6 = (((packet[1] >> 1) & 0x7F) | (packet[2] << 7)) / 64.0;
        float distance_q2 = (packet[3] | (packet[4] << 8)) / 4;

        // printf("0x%x 0x%x 0x%x 0x%x 0x%x\n", packet[0], packet[1], packet[2], packet[3], packet[4]);
        printf("ScanStart: %i - Angle: %f - Distance: %f\n", scan_start, angle_q6, distance_q2);
    }

}

